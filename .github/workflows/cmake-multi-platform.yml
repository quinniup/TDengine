# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v3*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++


    steps:
    - uses: actions/checkout@v4

    - name: Check Machine deps
      run: |
        sudo apt-get update
        sudo apt install -y libgeos-dev 
        sudo apt install build-essential libjansson-dev libsnappy-dev liblzma-dev libz-dev zlib1g pkg-config


    - name: Set up Rust
      id: setup-rust
      uses: actions-rs/toolchain@v1
      with:
        components: rustfmt, clippy, llvm-tools-preview
        toolchain: stable
        default: true

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ steps.setup-rust.outputs.rustc_hash }}

    - uses: actions/cache@v3
      with:
        path: |
          target
        key: ${{ runner.os }}-taos-target-${{ steps.setup-rust.outputs.rustc_hash }}

    - name: Prepare development tools
      run: |
        sudo apt install libjansson-dev libsnappy-dev liblzma-dev libz-dev pkg-config libgflags2.2 libgflags-dev libgeos-dev -y
        sudo timedatectl set-timezone Asia/Shanghai
        sudo date

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - uses: actions/cache@v3
      id: cache-rust-target
      with:
        path: |
          TDengine/tools/taosws-rs/target/
        key: ${{ runner.os }}-cargo-target-${{ steps.setup-rust.outputs.rustc_hash }}        

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/debug" >> "$GITHUB_OUTPUT"
        echo ::set-output name=tag::${GITHUB_REF#refs/*/}
        echo ::set-output name=datetime::$(date +"%Y-%m-%d_%H-%M-%S")

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cd ${{ steps.strings.outputs.build-output-dir }} &&
        cmake ${{ github.workspace }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TOOLS=true
        -DBUILD_CONTRIB=true
        -DBUILD_HTTP=false
        -DWEBSOCKET=true

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        make -j 8

    - uses: actions/cache@v3
      with:
        path: |
          ${{ steps.strings.outputs.build-output-dir }}
        key: ${{ runner.os }}-cmake-${{ matrix.build_type }}-${{ steps.strings.outputs.version }}


    - name: Tar the Build
      run: >
        cd ${{ github.workspace }}/packaging/tools &&
        ./makepkg.sh ${{ steps.strings.outputs.build-output-dir }} ${{ steps.strings.outputs.tag }} ${{ steps.strings.outputs.datetime }} x64 Linux server stable cloud ${{ steps.strings.outputs.tag }} taos TDengine taos 

      
    - name: Create Release and Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ steps.strings.outputs.tag }}
        name: Release ${{ steps.strings.outputs.tag }}
        body: TODO New Release.
        draft: false
        prerelease: false
        files: |
          ${{ github.workspace }}/release/*.tar.gz
          LICENSE 